     1                                 %line 15+1 macro.asm
     2                                 [section .bss]
     3 00000000 <gap>                  buffer resb 4
     4 00000004 <gap>                  n resd 1
     5 00000008 <gap>                  sumN resd 1
     6 0000000C <gap>                  ascii resb 10
     7                                 [section .data]
     8 00000000 496E7075742061206E-    msg1 db "Input a number (004~999): "
     9 00000000 756D62657220283030-
    10 00000000 347E393939293A20   
    11 0000001A 31202B2032202B2033-    msg2 db "1 + 2 + 3 +...+ "
    12 0000001A 202B2E2E2E2B20     
    13 0000002A 203D20                 msg3 db " = "
    14                                 [section .text]
    15                                 [global _start]
    16                                 _start:
    17 00000000 48C7C001000000         mov rax, 1
    18                                 %line 27+0 macro.asm
    19 00000007 48C7C701000000         mov rdi, 1
    20 0000000E 48C7C6[00000000]       mov rsi, msg1
    21 00000015 48C7C21A000000         mov rdx, 26
    22 0000001C 0F05                   syscall
    23                                 %line 28+1 macro.asm
    24 0000001E 48C7C000000000         mov rax, 0
    25                                 %line 28+0 macro.asm
    26 00000025 48C7C700000000         mov rdi, 0
    27 0000002C 48C7C6[00000000]       mov rsi, buffer
    28 00000033 48C7C204000000         mov rdx, 4
    29 0000003A 0F05                   syscall
    30                                 %line 29+1 macro.asm
    31 0000003C 66B80000               mov ax, 0
    32 00000040 66BB0A00               mov bx, 10
    33 00000044 48C7C600000000         mov rsi, 0
    34                                 inputLoop:
    35 0000004B 8A8E[00000000]         mov cl, byte[buffer+rsi]
    36 00000051 80E10F                 and cl, 0f
    37 00000054 00C8                   add al, cl
    38 00000056 80D400                 adc ah, 0
    39 00000059 4883FE02               cmp rsi, 2
    40 0000005D 7401                   je skipMul
    41 0000005F 66F7E3                 mul bx
    42                                 skipMul:
    43 00000062 48FFC6                 inc rsi
    44 00000065 4883FE03               cmp rsi, 3
    45 00000069 7CDE                   jl inputLoop
    46 0000006B 66890425[00000000]     mov word[n], ax
    47                                 
    48 00000073 B900000000             mov ecx, 0
    49                                 sumLoop:
    50 00000078 010C25[00000000]       add dword[sumN], ecx
    51 0000007F FFC1                   inc ecx
    52 00000081 3B0C25[00000000]       cmp ecx, dword[n]
    53 00000088 76EC                   jbe sumLoop
    54                                 
    55                                 
    56 0000008A 8B0425[00000000]       mov eax, dword[sumN]
    57 00000091 48C7C100000000         mov rcx, 0
    58 00000098 BB0A000000             mov ebx, 10
    59                                 divideLoop:
    60 0000009D BA00000000             mov edx, 0
    61 000000A2 F7F3                   div ebx
    62 000000A4 52                     push rdx
    63 000000A5 48FFC1                 inc rcx
    64 000000A8 83F800                 cmp eax, 0
    65 000000AB 75EE                   jne divideLoop
    66                                 
    67 000000AD 48C7C3[00000000]       mov rbx, ascii
    68 000000B4 48C7C700000000         mov rdi, 0
    69                                 popLoop:
    70 000000BB 58                     pop rax
    71 000000BC 0430                   add al, "0"
    72 000000BE 88043B                 mov byte [rbx+rdi], al
    73 000000C1 48FFC7                 inc rdi
    74 000000C4 E2F3                   loop popLoop
    75 000000C6 C6043B0A               mov byte [rbx+rdi], 10
    76 000000CA 48C7C001000000         mov rax, 1
    77                                 %line 74+0 macro.asm
    78 000000D1 48C7C701000000         mov rdi, 1
    79 000000D8 48C7C6[00000000]       mov rsi, msg2
    80 000000DF 48C7C210000000         mov rdx, 16
    81 000000E6 0F05                   syscall
    82                                 %line 75+1 macro.asm
    83 000000E8 48C7C001000000         mov rax, 1
    84                                 %line 75+0 macro.asm
    85 000000EF 48C7C701000000         mov rdi, 1
    86 000000F6 48C7C6[00000000]       mov rsi, buffer
    87 000000FD 48C7C203000000         mov rdx, 3
    88 00000104 0F05                   syscall
    89                                 %line 76+1 macro.asm
    90 00000106 48C7C001000000         mov rax, 1
    91                                 %line 76+0 macro.asm
    92 0000010D 48C7C701000000         mov rdi, 1
    93 00000114 48C7C6[00000000]       mov rsi, msg3
    94 0000011B 48C7C203000000         mov rdx, 3
    95 00000122 0F05                   syscall
    96                                 %line 77+1 macro.asm
    97 00000124 48C7C001000000         mov rax, 1
    98                                 %line 77+0 macro.asm
    99 0000012B 48C7C701000000         mov rdi, 1
   100 00000132 48C7C6[00000000]       mov rsi, ascii
   101 00000139 48C7C207000000         mov rdx, 7
   102 00000140 0F05                   syscall
   103                                 %line 78+1 macro.asm
   104 00000142 48C7C03C000000         mov rax, 60
   105 00000149 48C7C700000000         mov rdi, 0
   106 00000150 0F05                   syscall
